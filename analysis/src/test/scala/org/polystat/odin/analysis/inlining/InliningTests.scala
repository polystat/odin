package org.polystat.odin.analysis.inlining

import cats.data.EitherNel
import cats.data.{NonEmptyList => Nel}
import cats.syntax.either._
import org.polystat.odin.analysis.utils.inlining.Inliner
import org.polystat.odin.analysis.utils.inlining.LocatorContext
import org.polystat.odin.backend.eolang.ToEO.instances._
import org.polystat.odin.backend.eolang.ToEO.ops._
import org.polystat.odin.parser.eo.Parser

import SetLocatorsTestCases._
import InlineCallsTestCases._
// import org.polystat.odin.core.ast._

class InliningTests extends munit.FunSuite {

  val locatorTests: List[LocatorTestCase] = List(
    vitaliyTestLocators,
    nikolayTestLocators,
    nonExistentNameTestLocators,
    builtinObjects,
    autoGenerated,
    withAliases,
    withPredef
  )

  locatorTests.foreach { case LocatorTestCase(label, before, after) =>
    test("setLocators - " + label) {
      val expected: EitherNel[String, String] = after
      val obtained: EitherNel[String, String] = Parser
        .parse(before)
        .leftMap(Nel.one)
        .flatMap(LocatorContext.setLocators)
        .map(_.toEOPretty)
      assertEquals(obtained, expected)
    }
  }

  val inliningTests: List[InliningTestCase] = List(
    nikolayTestInlining,
    vitaliyTestInlining,
    fakeCallTest,
    looksFakeButRealTest,
    factorialTest,
    evenOddTest,
    average3Test,
    average3WithComponentsTest,
    notEnoughArgs,
    tooManyArgs,
    withInheritance,
  )
    .concat(simpleTests)

  inliningTests.foreach { case InliningTestCase(label, before, after) =>
    test("inlineCalls - " + label) {
      val expected = after
      val obtained = Parser
        .parse(before)
        .leftMap(Nel.one)
        .flatMap(Inliner.inlineAllCalls)
        .map(_.toEOPretty)
      assertEquals(obtained, expected)
    }
  }

}
